// Code generated by moshi-kotlin-codegen. Do not edit.
package app.loup.geolocation.data

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class LocationUpdatesRequest_OptionsJsonAdapter(
  moshi: Moshi
) : JsonAdapter<LocationUpdatesRequest.Options>() {
  private val options: JsonReader.Options = JsonReader.Options.of("interval", "fastestInterval",
      "expirationTime", "expirationDuration", "maxWaitTime", "numUpdates")

  private val nullableLongAdapter: JsonAdapter<Long?> = moshi.adapter(Long::class.javaObjectType,
      emptySet(), "interval")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "numUpdates")

  override fun toString(): String = buildString(52) {
      append("GeneratedJsonAdapter(").append("LocationUpdatesRequest.Options").append(')') }

  override fun fromJson(reader: JsonReader): LocationUpdatesRequest.Options {
    var interval: Long? = null
    var fastestInterval: Long? = null
    var expirationTime: Long? = null
    var expirationDuration: Long? = null
    var maxWaitTime: Long? = null
    var numUpdates: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> interval = nullableLongAdapter.fromJson(reader)
        1 -> fastestInterval = nullableLongAdapter.fromJson(reader)
        2 -> expirationTime = nullableLongAdapter.fromJson(reader)
        3 -> expirationDuration = nullableLongAdapter.fromJson(reader)
        4 -> maxWaitTime = nullableLongAdapter.fromJson(reader)
        5 -> numUpdates = nullableIntAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return LocationUpdatesRequest.Options(
        interval = interval,
        fastestInterval = fastestInterval,
        expirationTime = expirationTime,
        expirationDuration = expirationDuration,
        maxWaitTime = maxWaitTime,
        numUpdates = numUpdates
    )
  }

  override fun toJson(writer: JsonWriter, value: LocationUpdatesRequest.Options?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("interval")
    nullableLongAdapter.toJson(writer, value.interval)
    writer.name("fastestInterval")
    nullableLongAdapter.toJson(writer, value.fastestInterval)
    writer.name("expirationTime")
    nullableLongAdapter.toJson(writer, value.expirationTime)
    writer.name("expirationDuration")
    nullableLongAdapter.toJson(writer, value.expirationDuration)
    writer.name("maxWaitTime")
    nullableLongAdapter.toJson(writer, value.maxWaitTime)
    writer.name("numUpdates")
    nullableIntAdapter.toJson(writer, value.numUpdates)
    writer.endObject()
  }
}
