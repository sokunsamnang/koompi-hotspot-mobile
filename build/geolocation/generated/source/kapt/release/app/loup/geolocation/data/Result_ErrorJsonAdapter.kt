// Code generated by moshi-kotlin-codegen. Do not edit.
package app.loup.geolocation.data

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class Result_ErrorJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Result.Error>() {
  private val options: JsonReader.Options = JsonReader.Options.of("type", "playServices", "message",
      "fatal")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "type")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "playServices")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "fatal")

  override fun toString(): String = buildString(34) {
      append("GeneratedJsonAdapter(").append("Result.Error").append(')') }

  override fun fromJson(reader: JsonReader): Result.Error {
    var type: String? = null
    var playServices: String? = null
    var message: String? = null
    var fatal: Boolean? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> type = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type", "type",
            reader)
        1 -> playServices = nullableStringAdapter.fromJson(reader)
        2 -> message = nullableStringAdapter.fromJson(reader)
        3 -> fatal = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("fatal", "fatal",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Result.Error(
        type = type ?: throw Util.missingProperty("type", "type", reader),
        playServices = playServices,
        message = message,
        fatal = fatal ?: throw Util.missingProperty("fatal", "fatal", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: Result.Error?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("type")
    stringAdapter.toJson(writer, value.type)
    writer.name("playServices")
    nullableStringAdapter.toJson(writer, value.playServices)
    writer.name("message")
    nullableStringAdapter.toJson(writer, value.message)
    writer.name("fatal")
    booleanAdapter.toJson(writer, value.fatal)
    writer.endObject()
  }
}
