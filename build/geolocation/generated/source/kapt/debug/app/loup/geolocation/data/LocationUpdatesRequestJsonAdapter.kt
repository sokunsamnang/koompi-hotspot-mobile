// Code generated by moshi-kotlin-codegen. Do not edit.
package app.loup.geolocation.data

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Float
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class LocationUpdatesRequestJsonAdapter(
  moshi: Moshi
) : JsonAdapter<LocationUpdatesRequest>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "strategy", "permission",
      "accuracy", "inBackground", "displacementFilter", "options")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val strategyAdapter: JsonAdapter<LocationUpdatesRequest.Strategy> =
      moshi.adapter(LocationUpdatesRequest.Strategy::class.java, emptySet(), "strategy")

  private val permissionAdapter: JsonAdapter<Permission> = moshi.adapter(Permission::class.java,
      emptySet(), "permission")

  private val priorityAdapter: JsonAdapter<Priority> = moshi.adapter(Priority::class.java,
      emptySet(), "accuracy")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "inBackground")

  private val floatAdapter: JsonAdapter<Float> = moshi.adapter(Float::class.java, emptySet(),
      "displacementFilter")

  private val optionsAdapter: JsonAdapter<LocationUpdatesRequest.Options> =
      moshi.adapter(LocationUpdatesRequest.Options::class.java, emptySet(), "options")

  override fun toString(): String = buildString(44) {
      append("GeneratedJsonAdapter(").append("LocationUpdatesRequest").append(')') }

  override fun fromJson(reader: JsonReader): LocationUpdatesRequest {
    var id: Int? = null
    var strategy: LocationUpdatesRequest.Strategy? = null
    var permission: Permission? = null
    var accuracy: Priority? = null
    var inBackground: Boolean? = null
    var displacementFilter: Float? = null
    var options_: LocationUpdatesRequest.Options? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> strategy = strategyAdapter.fromJson(reader) ?: throw Util.unexpectedNull("strategy",
            "strategy", reader)
        2 -> permission = permissionAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("permission", "permission", reader)
        3 -> accuracy = priorityAdapter.fromJson(reader) ?: throw Util.unexpectedNull("accuracy",
            "accuracy", reader)
        4 -> inBackground = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("inBackground", "inBackground", reader)
        5 -> displacementFilter = floatAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("displacementFilter", "displacementFilter", reader)
        6 -> options_ = optionsAdapter.fromJson(reader) ?: throw Util.unexpectedNull("options_",
            "options", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return LocationUpdatesRequest(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        strategy = strategy ?: throw Util.missingProperty("strategy", "strategy", reader),
        permission = permission ?: throw Util.missingProperty("permission", "permission", reader),
        accuracy = accuracy ?: throw Util.missingProperty("accuracy", "accuracy", reader),
        inBackground = inBackground ?: throw Util.missingProperty("inBackground", "inBackground",
            reader),
        displacementFilter = displacementFilter ?: throw Util.missingProperty("displacementFilter",
            "displacementFilter", reader),
        options = options_ ?: throw Util.missingProperty("options_", "options", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: LocationUpdatesRequest?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value.id)
    writer.name("strategy")
    strategyAdapter.toJson(writer, value.strategy)
    writer.name("permission")
    permissionAdapter.toJson(writer, value.permission)
    writer.name("accuracy")
    priorityAdapter.toJson(writer, value.accuracy)
    writer.name("inBackground")
    booleanAdapter.toJson(writer, value.inBackground)
    writer.name("displacementFilter")
    floatAdapter.toJson(writer, value.displacementFilter)
    writer.name("options")
    optionsAdapter.toJson(writer, value.options)
    writer.endObject()
  }
}
